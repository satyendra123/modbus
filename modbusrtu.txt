// isme humare pass ek sensor hai jo rs485 connector hai means ye hume rs485 to ttl module se connect krenge apne arduino ke sath aur ye hume temperature aur humidity ka data send karne lagega
//lekin isme hum modbus library ka use kiye bina value ko read kiya hai.
/*
  Welcome to JP Learning
*/
#include <SoftwareSerial.h>

// GPIO Pins
byte TX_PIN = 4, RX_PIN = 5;
byte DE_RE_PIN = 16, LED_PIN = 2;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

// Variables
byte no_Byte, incomingByte[9] = { 0 };

// Modbus Request Bytes
byte type = 2; // (1=Humidity, 2=Temperature, 3=Humidity and Temperature)

// byte sendBuffer[] = { 0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x84, 0x0A };  // Valid (Single Read for Humidity)
// byte sendBuffer[] = { 0x01, 0x04, 0x00, 0x00, 0x00, 0x01, 0x31, 0xCA };  // Invalid (Single Read for Humidity)


byte sendBuffer[] = { 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0xD5, 0xCA };  // Valid (Single Read for Temperature)
// byte sendBuffer[] = { 0x01, 0x04, 0x00, 0x01, 0x00, 0x01, 0x60, 0x0A };  // Invalid (Single Read for Temperature)

// byte sendBuffer[] = { 0x01, 0x03, 0x00, 0x00, 0x00, 0x02, 0xC4, 0x0B }; // Valid (Read for Humidity and Temperature)
// byte sendBuffer[] = { 0x01, 0x04, 0x00, 0x00, 0x00, 0x02, 0x71, 0xCB }; // Invalid (Read for Humidity and Temperature)
// byte sendBuffer[] = { 0x02, 0x03, 0x00, 0x00, 0x00, 0x02, 0xC4, 0x38 }; // Invalid (Read for Humidity and Temperature)

float humidity, temperature;
void setup() {
  Serial.begin(115200);
  Soft_Serial.begin(9600);

  pinMode(DE_RE_PIN, OUTPUT);  //DE/RE Controling pin of RS-485
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH);

  Serial.println("\n\nWelcome to JP Learning\n");
}

void loop() {
  read_Modbus();

  if (no_Byte >= 7) {
    String incomingBytesInString[no_Byte];
    // Serial.println("\n\nno_Byte = " + String(no_Byte));
    for (int i = 0; i < no_Byte; i++) {
      // Serial.print("incomingByte[" + String(i) + "] = ");
      // Serial.println(String(incomingByte[i]) + " " + String(incomingByte[i], HEX));

      if (String(incomingByte[i]).length() == 1)
        incomingBytesInString[i] = "0" + String(incomingByte[i], HEX);
      else
        incomingBytesInString[i] = String(incomingByte[i], HEX);
    }

    if (type == 1) {
      String dataTemp = incomingBytesInString[3] + incomingBytesInString[4];
      Serial.println("\ndataTemp = " + dataTemp);
      int value = hexToDec(dataTemp);
      Serial.println("value = " + String(value));
      humidity = float(value) / 10;

      Serial.println("\nHumidity = " + String(humidity, 2) + " %\n\n");
    } else if (type == 2) {
      String dataTemp = incomingBytesInString[3] + incomingBytesInString[4];
      Serial.println("\ndataTemp = " + dataTemp);
      int value = hexToDec(dataTemp);
      Serial.println("value = " + String(value));
      temperature = float(value) / 10;

      Serial.println("\nTemperature = " + String(temperature, 2) + " 째C\n\n");
    } else if (type == 3) {
      String dataTemp = incomingBytesInString[3] + incomingBytesInString[4];
      Serial.println("\ndataTemp = " + dataTemp);
      int value = hexToDec(dataTemp);
      Serial.println("value = " + String(value));
      humidity = float(value) / 10;

      dataTemp = incomingBytesInString[5] + incomingBytesInString[6];
      Serial.println("dataTemp = " + dataTemp);
      value = hexToDec(dataTemp);
      Serial.println("value = " + String(value));
      temperature = float(value) / 10;

      Serial.println("\nHumidity = " + String(humidity, 2) + " %");
      Serial.println("Temperature = " + String(temperature, 2) + " 째C\n\n");
    }

    no_Byte = 0;
  }
  delay(5000);
}

void read_Modbus() {
  // Transmition Enable
  digitalWrite(DE_RE_PIN, HIGH);  //DE/RE=HIGH Transmit Enabled

  // Serial.println("\n\nsizeof(sendBuffer): " + String(sizeof(sendBuffer)));
  // for (byte i = 0; i < sizeof(sendBuffer); i++) {
  //   Serial.println("Request: " + String(sendBuffer[i], DEC) + " " + String(sendBuffer[i], HEX));
  // }
  // Serial.println();
  Soft_Serial.write(sendBuffer, sizeof(sendBuffer));

  // Receiving Enable
  digitalWrite(DE_RE_PIN, LOW);  //DE/RE=LOW Receive Enabled

  while (Soft_Serial.available() > 0) {
    //    Serial.println(Soft_Serial.read(), HEX);
    byte temp = Soft_Serial.read();
    Serial.println("Response: " + String(temp, DEC) + " " + String(temp, HEX));
    incomingByte[no_Byte] = temp;
    no_Byte++;
  }
}

int hexToDec(String hexString) {
  int decValue = 0, nextInt;
  for (int i = 0; i < hexString.length(); i++) {
    nextInt = int(hexString.charAt(i));
    if (nextInt >= 48 && nextInt <= 57) nextInt = map(nextInt, 48, 57, 0, 9);
    if (nextInt >= 65 && nextInt <= 70) nextInt = map(nextInt, 65, 70, 10, 15);
    if (nextInt >= 97 && nextInt <= 102) nextInt = map(nextInt, 97, 102, 10, 15);
    nextInt = constrain(nextInt, 0, 15);
    decValue = (decValue * 16) + nextInt;
  }
  return decValue;
}

// EXAMPLE-2 in this we are using the modbus library for reading the temperature and humidity data

/*
  Welcome to JP Learning
*/
#include <SoftwareSerial.h>
#include <ModbusMaster.h>

// GPIO Pins
byte TX_PIN = 4, RX_PIN = 5;
byte DE_RE_PIN = 16, LED_PIN = 2;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

ModbusMaster node;

// Variables
#define Sensor_ID 1
// #define Sensor_ID 2
#define Reg_Address 0x0000 // for Humidity and Temperature
#define Reg_Address1 0x0000 // for Humidity
#define Reg_Address2 0x0001 // for Temperature
float humidity, temperature;

void preTransmission() {
  digitalWrite(DE_RE_PIN, HIGH);
}
void postTransmission() {
  digitalWrite(DE_RE_PIN, LOW);
}

void setup() {
  Serial.begin(115200);
  Soft_Serial.begin(9600);

  pinMode(DE_RE_PIN, OUTPUT);  //DE/RE Controling pin of RS-485
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH);

  node.begin(Sensor_ID, Soft_Serial);
  node.preTransmission(preTransmission);
  node.postTransmission(postTransmission);
  
  Serial.println("\n\nWelcome to JP Learning\n");
}

void loop() {
  // Serial.println("\nHumidity = " + String((float)Read_Data2(Reg_Address1) / 10, 2) + " %");
  // delay(100);
  // Serial.println("Temperature = " + String((float)Read_Data2(Reg_Address2) / 10, 2) + " 째C\n\n");
  // delay(100);

  Read_Data();
  Serial.println("\nHumidity = " + String(humidity, 2) + " %");
  Serial.println("Temperature = " + String(temperature, 2) + " 째C\n\n");
  delay(5000);
}
long Read_Data2(int Reg_Addr)
{
  uint8_t result, j;
  long value = 0;
  byte dataReadLength = 1;
  uint16_t data[dataReadLength];

  // Disable watchdog reset
  ESP.wdtDisable();

  result = node.readHoldingRegisters(Reg_Addr, dataReadLength);
  // result = node.readInputRegisters(Reg_Addr, dataReadLength);
  // Serial.println("result: " + String(result, HEX) + ", " + String(result));

  // Enable watchdog reset
  ESP.wdtEnable(1);

  if (result == node.ku8MBSuccess) {
    for (j = 0; j < dataReadLength; j++)
      data[j] = (node.getResponseBuffer(j));

    // Serial.println("data[0]: " + String(data[0], HEX) + " " + String(data[0]));

    String dataTemp = String(data[0], HEX);
    // Serial.println("\ndataTemp = " + dataTemp);
    int value = hexToDec(dataTemp);
    Serial.println("\nvalue = " + String(value));
    return value;
  } else {
    Serial.print("Connect modbus fail. REG >>> "); Serial.println(Reg_Addr); // Debug
    delay(1000);
    return 0;
  }
}
void Read_Data() {
  uint8_t result, j;
  long value = 0;
  byte dataReadLength = 2;
  uint16_t data[dataReadLength];

  // Disable watchdog reset
  ESP.wdtDisable();

  result = node.readHoldingRegisters(Reg_Address, dataReadLength);

  // Enable watchdog reset
  ESP.wdtEnable(1);

  if (result == node.ku8MBSuccess) {
    for (j = 0; j < dataReadLength; j++)
      data[j] = (node.getResponseBuffer(j));

    Serial.println("data[0]: " + String(data[0], HEX) + " " + String(data[0]));
    Serial.println("data[1]: " + String(data[1], HEX) + " " + String(data[1]));

    int value = hexToDec(String(data[0], HEX));
    Serial.println("\nvalue = " + String(value));
    humidity = (float)value / 10;
    value = hexToDec(String(data[1], HEX));
    Serial.println("value = " + String(value));
    temperature = (float)value / 10;
  } else {
    Serial.print("Connect modbus fail. REG >>> ");
    Serial.println(Reg_Address);  // Debug
    delay(1000);
  }
}
int hexToDec(String hexString) {
  int decValue = 0, nextInt;
  for (int i = 0; i < hexString.length(); i++) {
    nextInt = int(hexString.charAt(i));
    if (nextInt >= 48 && nextInt <= 57) nextInt = map(nextInt, 48, 57, 0, 9);
    if (nextInt >= 65 && nextInt <= 70) nextInt = map(nextInt, 65, 70, 10, 15);
    if (nextInt >= 97 && nextInt <= 102) nextInt = map(nextInt, 97, 102, 10, 15);
    nextInt = constrain(nextInt, 0, 15);
    decValue = (decValue * 16) + nextInt;
  }
  return decValue;
}